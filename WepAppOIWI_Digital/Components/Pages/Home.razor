@page "/"
@rendermode InteractiveServer
@inject DocumentCatalogService DocumentCatalog
@inject ILogger<WepAppOIWI_Digital.Components.Pages.Home> Logger

<PageTitle>Home</PageTitle>

<h1 class="mb-3">üìÑ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ OI/WI</h1>
<p class="text-muted mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ö‡∏ô Server Local</p>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}
else if (isLoading)
{
    <p class="text-muted">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped align-middle">
            <thead class="table-light">
                <tr>
                    <th scope="col" style="width: 70px;">No.</th>
                    <th scope="col">OI/WI Name</th>
                    <th scope="col">Line</th>
                    <th scope="col">Station</th>
                    <th scope="col">Model</th>
                    <th scope="col">Time</th>
                    <th scope="col">Name</th>
                </tr>
            </thead>
            <tbody>
                @if (documents.Count == 0)
                {
                    <tr>
                        <td colspan="7" class="text-center text-muted py-4">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•</td>
                    </tr>
                }
                else
                {
                    @for (var index = 0; index < documents.Count; index++)
                    {
                        var document = documents[index];
                        <tr>
                            <td>@(index + 1)</td>
                            <td>
                                @if (!string.IsNullOrEmpty(document.RelativeUrl))
                                {
                                    <a href="@document.RelativeUrl" target="_blank" rel="noopener">@document.DisplayName</a>
                                }
                                else
                                {
                                    @document.DisplayName
                                }
                            </td>
                            <td>@(DisplayOrDash(document.Line))</td>
                            <td>@(DisplayOrDash(document.Station))</td>
                            <td>@(DisplayOrDash(document.Model))</td>
                            <td>@FormatTimestamp(document.UpdatedAt)</td>
                            <td>@(DisplayOrDash(document.UploadedBy))</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@code {
    private readonly List<DocumentRecord> documents = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocumentsAsync();
    }

    private async Task LoadDocumentsAsync()
    {
        try
        {
            var result = await DocumentCatalog.GetDocumentsAsync();
            documents.Clear();
            documents.AddRange(result);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load OI/WI documents from the server file system.");
            errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
        }
        finally
        {
            isLoading = false;
        }
    }

    private static string DisplayOrDash(string? value)
        => string.IsNullOrWhiteSpace(value) || value == "-"
            ? "-"
            : value;

    private static string FormatTimestamp(DateTimeOffset? timestamp)
        => timestamp.HasValue
            ? timestamp.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
            : "-";
}
