@page "/setup"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject IJSRuntime JS
@inject ILogger<WepAppOIWI_Digital.Components.Pages.Setup> Log

@using System.Net
@using System.Text.Json
@using System.Linq
@using System.Threading
@using Microsoft.Extensions.Logging
@using WepAppOIWI_Digital.Helpers

<PageTitle>Setup</PageTitle>

<h1>⚙️Setup WorkOrder</h1>

<p>จัดการข้อมูล Work Order ด้วยการดึงจาก MES และแก้ไขข้อมูลที่จำเป็น</p>

<button class="btn GetMO" @onclick="OpenGetMoModal">📥 Get MO</button>

@if (ShowGetMoModal)
{
    <div class="modal-backdrop" @onclick="CloseGetMoModal">
        <div class="modal-card" @onclick:stopPropagation="true">
            <header class="modal-header">
                <h2>📥 ใส่ข้อมูล GetMO</h2>
                <button class="icon-button" @onclick="CloseGetMoModal">✖</button>
            </header>
            <div class="modal-body">
                <label>
                    <span>EMP_NO</span>
                    <input class="input" @bind="EmpNo" @bind:event="oninput" />
                </label>
                <label>
                    <span>FACTORY</span>
                    <input class="input" @bind="Factory" @bind:event="oninput" />
                </label>
                <label>
                    <span>LINE_NAME</span>
                    <input class="input" @bind="InputLine" @bind:event="oninput" />
                </label>
                <label>
                    <span>GETDATA_TYPE</span>
                    <select class="input" @bind="GetDataType">
                        <option value="0">0 - Mean in 180 Day</option>
                        <option value="1">1 - Mean in 7 Day</option>
                    </select>
                </label>
                <label>
                    <span>MO_TYPE</span>
                    <select class="input" @bind="MoType">
                        <option value="0">0 - Main Line</option>
                        <option value="1">1 - AI/SMT</option>
                    </select>
                </label>
                <label>
                    <span>Section</span>
                    <input class="input" @bind="Pending.Section" readonly />
                </label>
                <label>
                    <span>Group</span>
                    <input class="input" @bind="Pending.Group" readonly />
                </label>
                <label>
                    <span>Station</span>
                    <div class="input-with-button">
                        <input class="input" @bind="Pending.Station" readonly />
                        <button class="btn tertiary" @onclick="OpenStationPickerAsync">เลือก</button>
                    </div>
                </label>
            </div>
            <footer class="modal-footer">
                <button class="btn secondary" @onclick="CloseGetMoModal">ยกเลิก</button>
                <button class="btn primary" @onclick="GetMOAsync" disabled="@isLoading">@(isLoading ? "กำลังดึง..." : "✅ ดึงข้อมูล")</button>
            </footer>
        </div>
    </div>
}

@if (ShowStationPicker)
{
    <div class="modal-backdrop" @onclick="CloseStationPicker">
        <div class="modal-card" @onclick:stopPropagation="true">
            <header class="modal-header">
                <h2>📋 เลือก Section, Group, Station</h2>
                <button class="icon-button" @onclick="CloseStationPicker">✖</button>
            </header>
            <div class="modal-body">
                <label>
                    <span>ตัวกรองคำค้นหา</span>
                    <input class="input" @bind="SearchFilter" @bind:event="oninput" @bind:after="FilterStations" placeholder="กรอกคำค้นหา..." />
                </label>

                @if (FilteredStationList.Count > 0)
                {
                    <div class="table-wrapper">
                        <table>
                            <thead>
                                <tr>
                                    <th>Section</th>
                                    <th>Group</th>
                                    <th>Station</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var station in FilteredStationList)
                                {
                                    <tr>
                                        <td>@station.Section</td>
                                        <td>@station.Group</td>
                                        <td>@station.Station</td>
                                        <td class="actions">
                                            <button class="btn primary"
                                                    @onclick="() => SelectStation(station)"
                                                    @onclick:stopPropagation="true">
                                                เลือก
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="empty-state">ไม่มีข้อมูลสถานีให้เลือก</p>
                }
            </div>
        </div>
    </div>
}

@if (FilteredMoList.Count > 0)
{
    <section class="panel @(IsWorkOrderSelectionLocked ? "locked" : string.Empty)">
        <header class="panel-header">
            <h2>📋 เลือก Work Order</h2>

            @if (IsWorkOrderSelectionLocked)
            {
                <button class="btn warning" @onclick="UnlockWorkOrderSelectionAsync">✏️ แก้ไข</button>
            }
        </header>

        <div class="filter-row">
            <label>
                <span>ตัวกรองคำค้นหา</span>
                <input class="input" @bind="WorkOrderFilter" @bind:event="oninput" @bind:after="FilterWorkOrders" placeholder="กรอกคำค้นหา..." disabled="@IsWorkOrderSelectionLocked" />
            </label>
        </div>

        @if (IsWorkOrderSelectionLocked && !string.IsNullOrWhiteSpace(SelectedWorkOrderId))
        {
            <div class="selected-summary">
                <span><strong>Work Order:</strong> @WorkOrder</span>
                <span><strong>Model:</strong> @Model</span>
                <span><strong>Line:</strong> @Line</span>
            </div>
        }

        @if (IsWorkOrderSelectionLocked)
        {
            <p class="lock-message">🔒 เลือก Work Order แล้ว หากต้องการเปลี่ยนให้กดปุ่มแก้ไข</p>
        }

        <div class="table-wrapper">
            <table>
                <thead>
                    <tr>
                        <th>Work Order</th>
                        <th>Model</th>
                        <th>Line</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var mo in FilteredMoList)
                    {
                        var isSelected = IsWorkOrderSelected(mo);

                        <tr class="@(isSelected ? "selected" : string.Empty)">
                            <td>@mo.WorkOrder</td>
                            <td>@mo.Model</td>
                            <td>@mo.Line</td>
                            <td class="actions">
                                <button class="btn @(isSelected ? "success" : "primary")"
                                        disabled="@IsWorkOrderSelectionLocked"
                                        @onclick="() => ConfirmSelectWorkOrderAsync(mo)">
                                    @(isSelected ? "✔ เลือกแล้ว" : "เลือก")
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </section>
}

@code
{
    private const string tokenID = "894A0F0DF8494799E0530CCA940AC604";
    private const string secretKey = "894A0F0DF84A4799E0530CCA940AC604";

    private bool ShowGetMoModal { get; set; }
    private bool isLoading;
    private string SearchFilter { get; set; } = string.Empty;
    private string WorkOrderFilter { get; set; } = string.Empty;
    private bool ShowStationPicker { get; set; }

    private string WorkOrder { get; set; } = string.Empty;
    private string Model { get; set; } = string.Empty;
    private string Line { get; set; } = string.Empty;
    private string Section { get; set; } = string.Empty;
    private string Group { get; set; } = string.Empty;
    private string Station { get; set; } = string.Empty;

    private string EmpNo { get; set; } = string.Empty;
    private string Factory { get; set; } = "DET6";
    private string GetDataType { get; set; } = "0";
    private string MoType { get; set; } = "0";

    private string InputLine { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;
    private string StatusLevel { get; set; } = "info";
    private bool IsStatusVisible { get; set; }
    private bool IsStatusFading { get; set; }
    
    private CancellationTokenSource? statusResetCts;
    private List<WorkOrderEntry> MoResults { get; set; } = new();
    private List<StationInfo> FilteredStationList { get; set; } = new();
    private List<StationInfo> StationList { get; } = new();
    private List<WorkOrderEntry> FilteredMoList { get; set; } = new();
    private bool IsWorkOrderSelectionLocked { get; set; }
    private string SelectedWorkOrderId { get; set; } = string.Empty;


    private sealed class WorkOrderEntry
    {
        public string WorkOrder { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public string Line { get; set; } = string.Empty;
    }

    private sealed class PendingMoConfig
    {
        public string WorkOrder { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public string Line { get; set; } = string.Empty;
        public string Section { get; set; } = string.Empty;
        public string Group { get; set; } = string.Empty;
        public string Station { get; set; } = string.Empty;
    }
    private PendingMoConfig Pending { get; } = new();

    private sealed class StationInfo
    {
        public string Line { get; set; } = string.Empty;
        public string Section { get; set; } = string.Empty;
        public string Group { get; set; } = string.Empty;
        public string Station { get; set; } = string.Empty;
    }

    private void CloseStationPicker()
    {
        ShowStationPicker = false;
    }

    private void SelectStation(StationInfo station)
    {
        Pending.Section = station.Section ?? string.Empty;
        Pending.Group = station.Group ?? string.Empty;
        Pending.Station = station.Station ?? string.Empty;
        ShowStationPicker = false;
    }

    private void SelectWorkOrder(WorkOrderEntry entry)
    {
        SelectedWorkOrderId = entry.WorkOrder;

        WorkOrder = entry.WorkOrder;
        Model = entry.Model;
        Line = entry.Line;
        Section = Pending.Section;
        Group = Pending.Group;
        Station = Pending.Station;
        InputLine = entry.Line;

        SetStatus($"เลือก Work Order {WorkOrder} เรียบร้อย", "success");
    }

    private bool IsWorkOrderSelected(WorkOrderEntry entry)
        => !string.IsNullOrWhiteSpace(SelectedWorkOrderId)
           && string.Equals(SelectedWorkOrderId, entry.WorkOrder, StringComparison.OrdinalIgnoreCase);

    private async Task ConfirmSelectWorkOrderAsync(WorkOrderEntry entry)
    {
        if (IsWorkOrderSelectionLocked && !IsWorkOrderSelected(entry))
        {
            return;
        }

        var confirmMessage = $"ยืนยันเลือก Work Order {entry.WorkOrder}? หากยืนยันจะไม่สามารถเปลี่ยนแปลงได้";
        var confirmed = await JS.InvokeAsync<bool>("confirm", confirmMessage);
        if (!confirmed)
        {
            return;
        }

        IsWorkOrderSelectionLocked = true;
        ShowGetMoModal = false;

        SelectWorkOrder(entry);
    }

    private async Task UnlockWorkOrderSelectionAsync()
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "ต้องการแก้ไขการเลือก Work Order หรือไม่?");
        if (!confirmed)
        {
            return;
        }

        IsWorkOrderSelectionLocked = false;
        SelectedWorkOrderId = string.Empty;
        WorkOrder = string.Empty;
        Model = string.Empty;
        Line = string.Empty;
        SetStatus("ปลดล็อกการเลือก Work Order แล้ว สามารถเลือกใหม่ได้", "info");
    }

    private void SetStatus(string message, string level)
    {
        statusResetCts?.Cancel();
        statusResetCts?.Dispose();
        statusResetCts = null;

        StatusMessage = message;
        StatusLevel = string.IsNullOrWhiteSpace(level) ? "info" : level;
        IsStatusFading = false;
        IsStatusVisible = !string.IsNullOrWhiteSpace(message);

        if (IsStatusVisible && string.Equals(StatusLevel, "success", System.StringComparison.OrdinalIgnoreCase))
        {
            var cts = new CancellationTokenSource();
            statusResetCts = cts;
            _ = ScheduleStatusClearAsync(cts.Token);
        }
        else
        {
            StatusLevel = "info";
        }
    }

    private void OpenGetMoModal()
    {
        Pending.WorkOrder = WorkOrder;
        Pending.Model = Model;
        Pending.Line = string.IsNullOrWhiteSpace(InputLine) ? Line : InputLine;
        Pending.Section = Section;
        Pending.Group = Group;
        Pending.Station = Station;

        if (string.IsNullOrWhiteSpace(InputLine) && !string.IsNullOrWhiteSpace(Line))
        {
            InputLine = Line;
        }

        ShowGetMoModal = true;
        SetStatus(string.Empty, "info");
    }

    private async Task ScheduleStatusClearAsync(CancellationToken token)
    {
        try
        {
            await Task.Delay(TimeSpan.FromSeconds(5), token);
        }
        catch (TaskCanceledException)
        {
            return;
        }

        IsStatusFading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            await Task.Delay(TimeSpan.FromMilliseconds(500), token);
        }
        catch (TaskCanceledException)
        {
            return;
        }

        StatusMessage = string.Empty;
        StatusLevel = "info";
        IsStatusVisible = false;
        IsStatusFading = false;
        statusResetCts?.Dispose();
        statusResetCts = null;

        await InvokeAsync(StateHasChanged);
    }

    private void CloseGetMoModal()
    {
        ShowGetMoModal = false;
    }

    private void FilterStations()
    {
        FilteredStationList = string.IsNullOrWhiteSpace(SearchFilter)
            ? StationList.ToList()
            : StationList.Where(s =>
                (s.Section ?? string.Empty).Contains(SearchFilter, StringComparison.CurrentCultureIgnoreCase) ||
                (s.Group ?? string.Empty).Contains(SearchFilter, StringComparison.CurrentCultureIgnoreCase) ||
                (s.Station ?? string.Empty).Contains(SearchFilter, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

    private async Task OpenStationPickerAsync()
    {
        if (string.IsNullOrWhiteSpace(EmpNo) || string.IsNullOrWhiteSpace(Factory) || string.IsNullOrWhiteSpace(InputLine))
        {
            await JS.InvokeVoidAsync("alert", "⚠️ กรุณากรอก EMP_NO, FACTORY และ LINE_NAME ให้ครบก่อนเลือก Station");
            return;
        }

        try
        {
            SearchFilter = string.Empty;
            await LoadStationsFromMesAsync();
            FilterStations();
            ShowStationPicker = true;
        }
        catch (Exception ex)
        {
            Log.LogWarning(ex, "Failed to fetch stations from MES");
            await JS.InvokeVoidAsync("alert", $"❌ ไม่สามารถดึงข้อมูลสถานีได้: {ex.Message}");
        }
    }

    private async Task<List<WorkOrderEntry>> FetchWorkOrdersFromMesAsync()
    {
        string param = $"EMP_NO{EmpNo}FACTORY{Factory}GETDATA_TYPE{GetDataType}LINE_NAME{InputLine}MO_TYPE{MoType}";
        string sign = MD5Helper.Generate(secretKey + param);

        var url =
            $"http://THWGRMESEP01.deltaww.com:10101/QueryData/MOList" +
            $"?EMP_NO={Uri.EscapeDataString(EmpNo ?? string.Empty)}" +
            $"&FACTORY={Uri.EscapeDataString(Factory ?? string.Empty)}" +
            $"&GETDATA_TYPE={Uri.EscapeDataString(GetDataType ?? "0")}" +
            $"&LINE_NAME={Uri.EscapeDataString(InputLine ?? string.Empty)}" +
            $"&MO_TYPE={Uri.EscapeDataString(MoType ?? "0")}" +
            $"&sign={sign}";

        using var req = new HttpRequestMessage(HttpMethod.Get, url);
        req.Headers.TryAddWithoutValidation("TokenID", tokenID);

        using var res = await HttpClient.SendAsync(req);
        if (res.StatusCode == HttpStatusCode.Unauthorized)
        {
            throw new InvalidOperationException("MES unauthorized (401)");
        }

        res.EnsureSuccessStatusCode();

        var payload = await res.Content.ReadAsStringAsync();
        using var json = JsonDocument.Parse(payload);
        var root = json.RootElement;

        if (!root.TryGetProperty("Result", out var resultProp) ||
            !string.Equals(resultProp.GetString(), "OK", StringComparison.OrdinalIgnoreCase))
        {
            return new List<WorkOrderEntry>();
        }

        if (!root.TryGetProperty("Message", out var messages) || messages.ValueKind != JsonValueKind.Array)
        {
            return new List<WorkOrderEntry>();
        }

        var list = new List<WorkOrderEntry>();
        foreach (var item in messages.EnumerateArray())
        {
            var line = item.TryGetProperty("LINE_NAME", out var lineProp) ? lineProp.GetString() : null;
            if (!string.Equals(line?.Trim(), InputLine?.Trim(), StringComparison.OrdinalIgnoreCase))
            {
                continue;
            }

            list.Add(new WorkOrderEntry
            {
                WorkOrder = item.TryGetProperty("MO_NUMBER", out var mo) ? mo.GetString() ?? string.Empty : string.Empty,
                Model = item.TryGetProperty("MODEL_NAME", out var model) ? model.GetString() ?? string.Empty : string.Empty,
                Line = line ?? string.Empty
            });
        }

        return list;
    }

    private void FilterWorkOrders()
    {
        FilteredMoList = string.IsNullOrWhiteSpace(WorkOrderFilter)
            ? MoResults.ToList()
            : MoResults.Where(m =>
                (m.WorkOrder ?? string.Empty).Contains(WorkOrderFilter, StringComparison.CurrentCultureIgnoreCase) ||
                (m.Model ?? string.Empty).Contains(WorkOrderFilter, StringComparison.CurrentCultureIgnoreCase) ||
                (m.Line ?? string.Empty).Contains(WorkOrderFilter, StringComparison.CurrentCultureIgnoreCase))
            .ToList();
    }

    private async Task GetMOAsync()
    {
        if (string.IsNullOrWhiteSpace(EmpNo) || string.IsNullOrWhiteSpace(Factory) || string.IsNullOrWhiteSpace(InputLine))
        {
            await JS.InvokeVoidAsync("alert", "⚠️ กรุณากรอก EMP_NO, FACTORY และ LINE_NAME ให้ครบก่อนดึงข้อมูล");
            return;
        }

        isLoading = true;
        IsWorkOrderSelectionLocked = false;
        SelectedWorkOrderId = string.Empty;

        SetStatus("กำลังดึงข้อมูลจาก MES...", "info");

        try
        {
            WorkOrderFilter = string.Empty;
            MoResults = await FetchWorkOrdersFromMesAsync();
            FilterWorkOrders();

            ShowGetMoModal = false;

            if (FilteredMoList.Count > 0)
            {
                SetStatus($"พบ {FilteredMoList.Count} Work Order", "success");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "⚠️ ไม่พบข้อมูล Work Order จาก MES");
                SetStatus("ไม่พบข้อมูล Work Order", "warning");
            }
        }
        catch (Exception ex)
        {
            Log.LogWarning(ex, "Failed to fetch Work Orders from MES");
            await JS.InvokeVoidAsync("alert", $"❌ ไม่สามารถดึงข้อมูลได้: {ex.Message}");
            SetStatus("เกิดข้อผิดพลาดในการดึงข้อมูล MES", "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStationsFromMesAsync()
    {
        string param = $"EMP_NO{EmpNo}FACTORY{Factory}LINE_NAME{InputLine}";
        string sign = MD5Helper.Generate(secretKey + param);

        var url =
            $"http://THWGRMESEP01.deltaww.com:10101/QueryData/LineInfo" +
            $"?EMP_NO={Uri.EscapeDataString(EmpNo ?? string.Empty)}" +
            $"&FACTORY={Uri.EscapeDataString(Factory ?? string.Empty)}" +
            $"&LINE_NAME={Uri.EscapeDataString(InputLine ?? string.Empty)}" +
            $"&sign={sign}";

        using var req = new HttpRequestMessage(HttpMethod.Get, url);
        req.Headers.TryAddWithoutValidation("TokenID", tokenID);

        using var res = await HttpClient.SendAsync(req);
        if (res.StatusCode == HttpStatusCode.Unauthorized)
        {
            throw new InvalidOperationException("MES unauthorized (401)");
        }

        res.EnsureSuccessStatusCode();

        var payload = await res.Content.ReadAsStringAsync();
        using var json = JsonDocument.Parse(payload);
        var root = json.RootElement;

        if (!root.TryGetProperty("Result", out var resultProp) ||
            !string.Equals(resultProp.GetString(), "OK", StringComparison.OrdinalIgnoreCase))
        {
            StationList.Clear();
            FilteredStationList = new List<StationInfo>();
            return;
        }

        if (!root.TryGetProperty("Message", out var messages) || messages.ValueKind != JsonValueKind.Array)
        {
            StationList.Clear();
            FilteredStationList = new List<StationInfo>();
            return;
        }

        StationList.Clear();
        foreach (var item in messages.EnumerateArray())
        {
            StationList.Add(new StationInfo
            {
                Line = InputLine,
                Section = item.TryGetProperty("SECTION_NAME", out var section) ? section.GetString() ?? string.Empty : string.Empty,
                Group = item.TryGetProperty("GROUP_NAME", out var group) ? group.GetString() ?? string.Empty : string.Empty,
                Station = item.TryGetProperty("STATION_NAME", out var station) ? station.GetString() ?? string.Empty : string.Empty
            });
        }
    }

}
